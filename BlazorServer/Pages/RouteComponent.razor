@inject Libs.IAddonReader addonReader
@inject Libs.IBotController botController
@inject IJSRuntime JSRuntime;
@using System.Linq
@using Libs

<div class="card">
    <div class="card-header">
        <table width="100%">
            <tr>
                <td>Route</td>
                <td>
                    <div class="float-right">
                        Player at @addonReader.PlayerReader.XCoord.ToString("0.0") , @addonReader.PlayerReader.YCoord.ToString("0.0")
                    </div>
                </td>
            </tr>
        </table>
    </div>
    <div class="card-body">

        <div id="grid">

            <svg width="@(Size+2)px" height="@(Size+2)px" style="margin-top:0px">
                <g class="background">
                </g>
                <g class="group2">
                    @{
                        var colour = addonReader.PlayerReader.PlayerBitValues.PlayerInCombat ? "red" : "orange";

                        if (botController.GoapAgent != null && botController.GoapAgent.CurrentGoal?.GetType() == typeof(Libs.Goals.FollowRouteGoal))
                        {
                            colour = "blue";
                        }

                        @if (botController.RouteInfo != null)
                        {
                            <circle cx="@botController.RouteInfo.ToCanvasPointX(addonReader.PlayerReader.XCoord)" cy="@botController.RouteInfo.ToCanvasPointY(addonReader.PlayerReader.YCoord)" r="4" fill="@colour" />
                        }
                    }

                    <g stroke-width="1" stroke="lightgray">
                        @this.SpiritLines
                    </g>
                    <g fill="gray">
                        @this.SpiritPathPoints
                    </g>

                    <g stroke-width="1" stroke="gray">
                        @this.PathLines
                    </g>
                    <g fill="black">
                        @this.PathPoints
                    </g>

                    @if (botController.RouteInfo != null)
                    {
                        <g fill="green">
                            @((MarkupString)botController.RouteInfo.NextPoint())
                        </g>

                        <g>
                            @foreach (var death in this.Deaths)
                            {
                                @((MarkupString)botController.RouteInfo.DeathImage(death))
                            }
                        </g>
                    }
                </g>
            </svg>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int Size { get; set; } = 1024;

    private MarkupString PathLines = new MarkupString();
    private MarkupString PathPoints = new MarkupString();

    private MarkupString SpiritLines = new MarkupString();
    private MarkupString SpiritPathPoints = new MarkupString();

    private bool CanvasInitialised = false;

    private List<WowPoint> Deaths = new List<WowPoint>();

    protected override void OnInitialized()
    {
        ((Libs.AddonReader)addonReader).AddonDataChanged += (o, e) =>
        {
            base.InvokeAsync(() =>
            {
                try
                {
                    InitialiseRoute();
                    StateHasChanged();
                }
                catch { }
            });
        };
    }

    private void InitialiseRoute()
    {
        if (!CanvasInitialised && botController.RouteInfo != null)
        {
            var routeinfo = botController.RouteInfo;

            CanvasInitialised = true;
            routeinfo.SetMargin(10);
            routeinfo.SetCanvasSize(Size);
            this.PathLines = new MarkupString(routeinfo.RenderPathLines(routeinfo.PathPoints));
            this.PathPoints = new MarkupString(routeinfo.RenderPathPoints(routeinfo.PathPoints));

            this.SpiritLines = new MarkupString(routeinfo.RenderPathLines(routeinfo.SpiritPath));
            this.SpiritPathPoints = new MarkupString(routeinfo.RenderPathPoints(routeinfo.SpiritPath));

            if (botController.GoapAgent != null)
            {
                var walkToCorpseGoal = botController.GoapAgent.AvailableGoals.FirstOrDefault(a => a.GetType() == typeof(Libs.Goals.WalkToCorpseGoal)) as Libs.Goals.WalkToCorpseGoal;
                if (walkToCorpseGoal != null)
                {
                    Deaths = walkToCorpseGoal.Deaths;
                }
            }
        }
    }

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>("draw");
        }
    }
}